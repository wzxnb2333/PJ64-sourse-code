
* Introduction

 This software provides an algorithm that emulates the protection scheme of 
 N64 PIF/CIC-NUS-6105, by determining the proper response to each challenge. It
 was synthesized after a careful, exhaustive and detailed analysis of the 
 challenge/response pairs stored in the <pif2.dat> file from Project 64. These 
 challenge/response pairs were the only resource used during this project. 
 There was no kind of physical access to N64 hardware.

 This project was developed using gVim/nvi and FreeBSD 8.2. It is possible that
 some programs used for automatic creation of files inside the 'make' file may 
 have incompatible options with other operating systems (Linux, etc). For this
 reason, all automatically generated files are also included in this package.

* File Manifest

 - <README>: This README file detailing the N64 PIF/CIC-NUS-6105 package.

 - <Makefile>: The N64 PIF/CIC-NUS-6105 'make' file used for creating several 
       <pif2.dat> related files during testing, difference analysis, and 
       fixing.

 - <n64_cic_nus_6105.h>: The N64 PIF/CIC-NUS-6105 C header file used for 
       inclusion in other software projects.

 - <n64_cic_nus_6105.c>: The N64 PIF/CIC-NUS-6105 C source file used for 
       inclusion in other software projects.

 - <n64_cic_nus_6105_test.c>: The N64 PIF/CIC-NUS-6105 C source test file used 
       for testing the correctness of the challenge/response algorithm. It also 
       serves as an example of how to use this software in other projects. 

 - <pif2.dat>: The original PIF/CIC-NUS-6105 file that stores the values of the
       challenge/response pairs of 'Jet Force Gemini' and 'Banjo Tooie'. It has
       served as the only main reference for reversing the challenge/response
       algorithm.

 - <pif2_chl.dat>: A copy of the original PIF/CIC-NUS-6105 file that only 
       stores the values of the challenges of 'Jet Force Gemini' and 'Banjo 
       Tooie'. It is used by <n64_cic_nus_6105_test.c> as the starting point 
       for creating the challenge/response pairs and verifying the correctness 
       of the algorithm. This file can be automatically generated by executing 
       the following 'make' target:

       > make -s pif2_chl.dat

 - <pif2_rsp.dat>: A reconstruction of the original PIF/CIC-NUS-6105 file that 
       stores the values of the challenges/response pairs of 'Jet Force Gemini'
       and 'Banjo Tooie'. It is produced by <n64_cic_nus_6105_test.c> as the 
       final result of the calculation the challenge/response pairs, used for 
       verifying the correctness of the algorithm. This file can be 
       automatically generated by executing the following 'make' target:

       > make -s pif2_rsp.dat

 - <pif2.dat.diff>: A comparison between the original PIF/CIC-NUS-6105 
       <pif2.dat> file and the reconstructed <pif2_rsp.dat> file produced by 
       the <n64_cic_nus_6105_test.c> testing program. It shows all the 
       differences between the two files. These differences are detailed and 
       analysed at a later section. This file can be automatically generated by
       executing the following 'make' target:

       > make -s pif2.dat.diff

 - <pif2.dat.fixed>: The final fixed version of the original PIF/CIC-NUS-6105 
       file that stores all the correct challenge/response pairs, in accordance
       to the values obtained by the algorithm. This file can be automatically 
       generated by executing the following 'make' target:

       > make -s pif2.dat.fixed

* Configuration, Instalation and Operation 

 The challenge/response of the PIF/CIC-NUS-6105 protection scheme has a length 
 value of 32 nibbles (4 bit chunks). Of these 32 nibbles, 30 are used by the 
 challenge/response algorithm itself and 2 are used as command/response to/from
 the PIF. If different challenge/response lengths are needed for testing, they 
 can be configured by calling the 'n64_cic_nus_6105' function, present on the 
 <n64_cic_nus_6105.{h,c}> files, with the desired length value, other than the 
 default value of 'CHL_LEN - 2' nibbles.

 The PIF/CIC-NUS-6105 protection scheme software can be installed in any C/C++
 project just by doing proper inclusion of <n64_cic_nus_6105.h> C header file
 with a simple '#include "n64_cic_nus_6105.h"' macro, and updating the 
 respective 'make' files.

 The PIF/CIC-NUS-6105 protection scheme software provides a module with a 
 single C funcion that emulates all the needed functionality. Function callers 
 must provide two char arrays, one for the challenge and another for the 
 response, where each array char element contains a single nibble of the 
 challenge/response. They must also provide the common length of these two 
 arrays. It must not include the last two nibbles of PIF's command/response. 
 So, the default 'CHL_LEN - 2' nibble length must be used under normal 
 conditions.

* Testing

 This software contains one testing module that is used to demonstrate how to 
 use the C function and also to determine the differences between the original
 <pif2.dat> file from Project 64 and the reconstructed <pif2_rsp.dat> file. 
 These differences can be obtained by executing the following 'make' target:

 > make -s pif2.dat.diff

 This will produce <pif2.dat.diff> file that lists the output of the diff
 command between the original <pif2.dat> and the reconstructed <pif2_rsp.dat>. 
 It reports four differences between the two versions. Next section details and 
 explains the causes of each of these differences.

 It is also possible to create the reconstructed <pif2.dat.fixed> file using 
 this testing module by executing the following 'make' target:

 > make -s pif2.dat.fixed

 This file is similar to <pif2.dat> and only differs in four locations where 
 the input typos where automatically corrected. The file <pif2.dat.fixed> can 
 be used in place of the original <pif2.dat>.

 At any time and circumstance, all automatically generated files can be deleted
 by executing the following 'make' target:

 > make -s clean

* Differences from the Original <pif2.dat> File

 The differences between the original N64 PIF/CIC-NUS-6105 <pif2.dat> file from
 Project 64 and the reconstructed <pif2_rsp.dat> file created by the algorithm,
 are detailed below. These differences were obtained by executing the following 
 'make' target:

 > make -s pif2.dat.diff

 In total, there are four differences between the two files. Only two of them 
 (first and third differences) are related to the algorithm. The differences 
 are highlighted between '*'. All four differences seem to be common typos,
 typical of manual data input.

 - 1: The first difference is located at line 5 and is related to the single
      challenge/response pair used by 'Jet Force Gemini'. This mismatch was
      detected early in the process of understanding the algorithm, as it was
      a strange corner case that would require an ugly exception in the final
      algorithm. Fortunately, LaC has verifyed in his N64 development setup
      that this was really an error. This is cleary a transposition error. 

 5c5
 < 0x8FBB1DB876B63CEC,0x025BEAEDEC803A6B,0xDEB04FDB4CF76A13,0x000B73E74AC64045
 ---
 > 0x8FBB1DB876B63CEC,0x025BEAEDEC803A6B,0xDE0B4FDB4CF76A13,0x000B73E74AC64045

       Original string: '0xDE*B0*4FDB4CF76A13'
      Corrected string: '0xDE*0B*4FDB4CF76A13'

 - 2: The second difference is located at line 90 and is related to one of the
      challenge/response pairs used by 'Banjo Tooie'. This mismatch is *not* 
      related to the challenge/response algorithm. It is simply a lower/upper 
      case difference, a typical input typo.

 90c90
 < 0x0005001500540052,0x0200002000800001,0x8C7A71A15575C648,0x009F9F9Ff9f97163
 ---
 > 0x0005001500540052,0x0200002000800001,0x8C7A71A15575C648,0x009F9F9FF9F97163

       Original string: '0x009F9F9F*f9f*97163' 
      Corrected string: '0x009F9F9F*F9F*97163'

 - 3: The third difference is located at line 135 and is related to one of the
      challenge/response pairs used by 'Banjo Tooie'. This mismatch was 
      detected early in the process of understanding the algorithm, as it was
      a strange corner case that would require an ugly exception in the final
      algorithm. Fortunately, marshall has confirmed that a specific part of
      'Banjo Tooie' that always hung before, started running flawlessly after 
      applying this correction to <pif2.dat> file. This clearly is a similar
      shape input error, as 'B' is very similar to '8'.

 135c135
 < 0x00050017005F007F,0x020000F000C00001,0xABF2F9C971A311E1,0x00C66E4E9FBFF9CB
 ---
 > 0x00050017005F007F,0x020000F000C00001,0xA8F2F9C971A311E1,0x00C66E4E9FBFF9CB

       Original string: '0xA*B*F2F9C971A311E1'
      Corrected string: '0xA*8*F2F9C971A311E1'

 - 4: The fourth difference is located at line 186 and is related to one of the
      challenge/response pairs used by 'Banjo Tooie'. It is specifically 
      related to the PIF response, represented by two nibbles. This mismatch is
      *not* related to the challenge/response algorithm. As you can see, all 
      other pairs show a 0x00(...) PIF response to 0x02(...) PIF command. This 
      clearly seems to be an input typo, as '9' and '0' keys are located next 
      to each other on the majority of keyboards.

 186c186
 < 0x0002000B002C00B2,0x0200002000800000,0xF97B71E3C688E624,0x991717177171F9F9
 ---
 > 0x0002000B002C00B2,0x0200002000800000,0xF97B71E3C688E624,0x001717177171F9F9

       Original string: '0x*99*1717177171F9F9'
      Corrected string: '0x*00*1717177171F9F9'

* Copyright and Licensing Information

 Copyright 2011 X-Scale. All rights reserved.

 Redistribution and use in source and binary forms, with or without 
 modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright 
       notice, this list of conditions and the following disclaimer in the 
       documentation and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY X-Scale ``AS IS'' AND ANY EXPRESS OR IMPLIED 
 WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO 
 EVENT SHALL X-Scale OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are 
 those of the authors and should not be interpreted as representing official 
 policies, either expressed or implied, of X-Scale.

* Credits and Acknowledgments

 This project would have never been possible without the contribuitions of 
 the following individuals and organizations:

 - Oman: For being at the right place at the right time and being brave 
       enough to pay a personal price so we could understand in a much deeper
       way how this magical console really works. We owe you so much.

 - Jovis: For all the positive energy and impressive hacking spirit that you
       shared with the N64 community. You were absolutely instrumental in 
       several key events that shaped the N64 community in the last 14 years.
       Even if you're not physically with us anymore, your heritage, your 
       knowledge and your attitude will never be forgotten. 

          'The candle that burns twice as bright burns half as long.'

 - LaC: For the endless contributions that you've given to the N64 community 
       since the early days, when N64 was the next big thing. I've always 
       admired the deep knowledge that you've gathered about the most little 
       hardware details. Recently, you challanged us to find a small and 
       concise algorithm that would emulate the behaviour of CIC-NUS-6105
       challenge/response protection scheme and here is the final result. 
       LaC, Oman and Jovis were definitly the dream team of N64 reversing in 
       the late 90's. Without your contributions, we would be much poorer.

 - marshall: For keeping the N64 scene alive during the last decade, when 
       most people lost interest and moved along to different projects. You 
       are the force that has been keeping us all together in the later 
       years. When almost nobody cared about N64 anymore, you were always 
       there, spreading the word, developing in the console, and lately, 
       making impressive advances on the hardware side. I wish the best 
       success to your new 64drive project. 

 - hcs: For your contributions to the better understanding of the inner 
       workings of the Reality Co-Processor (RCP). Your skills have impressed
       me for a long time now. And without your precious help by sharing your
       kownledge, I would have never understood the immense importance of 
       Oman, Jovis and LaC achievements. Thank you !

 - Azimer & Tooie: For sharing with the N64 community your findings about the
       challenge/response pair used in 'Jet Force Gemini' and the 267 
       challenge/response pairs used in 'Banjo Tooie', all stored in the 
       'pif2.dat' file of Project 64. They were instrumental to the final
       success of this endeavour.

 - Silicon Graphics, Inc. (SGI): For creating MIPS R4000, MIPS R4300 and 
       Reality Co-Processor (RCP). You were the ultimate dream creator during
       the late 80's and early 90's. A very special word of gratitude goes to
       the two teams that during those years created RCP and MIPS R4300. They
       were technological breakthroughs back then.
 
 On a personal note, I would like to show my deepest gratitude to _Bijou_, 
 for being always a source of endless hope and inspiration. 

* Contact Information

   -= X-Scale =- (#n64dev@EFnet)

